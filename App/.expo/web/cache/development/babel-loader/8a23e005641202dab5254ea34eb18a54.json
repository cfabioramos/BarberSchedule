{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\desenvolvimento\\\\BarberSchedule\\\\App\\\\src\\\\screens\\\\Preload\\\\index.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useContext } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Container, LoadingIcon } from \"./styles\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { TOKEN_KEY } from \"../../util/Commons\";\nimport BarberLogo from \"../../assets/barber_2.svg\";\nimport Api from \"../../Api\";\nimport { UserContext } from \"../../contexts/UserContext\";\nexport default (function () {\n  var navigation = useNavigation();\n\n  var _useContext = useContext(UserContext),\n      userDispatch = _useContext.dispatch;\n\n  useEffect(function () {\n    var checkToken = function checkToken() {\n      var token, res, objPayload;\n      return _regeneratorRuntime.async(function checkToken$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(TOKEN_KEY));\n\n            case 2:\n              token = _context.sent;\n\n              if (!token) {\n                _context.next = 11;\n                break;\n              }\n\n              console.log(token);\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(Api.checkToken(token));\n\n            case 7:\n              res = _context.sent;\n\n              if (res) {\n                objPayload = {\n                  id: res.id,\n                  avatar: res.avatar,\n                  type: res.type,\n                  idCategory: 1\n                };\n                userDispatch({\n                  type: \"setUserContext\",\n                  payload: objPayload\n                });\n                navigation.navigate(\"MainTab\");\n              } else {\n                navigation.navigate(\"SignIn\");\n              }\n\n              _context.next = 12;\n              break;\n\n            case 11:\n              navigation.navigate(\"SignUp\");\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    checkToken();\n  }, []);\n  return React.createElement(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, React.createElement(BarberLogo, {\n    width: \"100%\",\n    height: \"23%\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }), React.createElement(LoadingIcon, {\n    size: \"large\",\n    color: \"#FFFFFF\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, \"Loading...\"));\n});","map":{"version":3,"sources":["C:/desenvolvimento/BarberSchedule/App/src/screens/Preload/index.js"],"names":["React","useEffect","useContext","Container","LoadingIcon","AsyncStorage","useNavigation","TOKEN_KEY","BarberLogo","Api","UserContext","navigation","userDispatch","dispatch","checkToken","getItem","token","console","log","res","objPayload","id","avatar","type","idCategory","payload","navigate"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;;AAEA,SAASC,SAAT,EAAoBC,WAApB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,SAAT;AACA,OAAOC,UAAP;AACA,OAAOC,GAAP;AACA,SAASC,WAAT;AAEA,gBAAe,YAAM;AACnB,MAAMC,UAAU,GAAGL,aAAa,EAAhC;;AAEA,oBAAmCJ,UAAU,CAACQ,WAAD,CAA7C;AAAA,MAAkBE,YAAlB,eAAQC,QAAR;;AAEAZ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMa,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACGT,YAAY,CAACU,OAAb,CAAqBR,SAArB,CADH;;AAAA;AACXS,cAAAA,KADW;;AAAA,mBAEbA,KAFa;AAAA;AAAA;AAAA;;AAGfC,cAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAHe;AAAA,+CAICP,GAAG,CAACK,UAAJ,CAAeE,KAAf,CAJD;;AAAA;AAIXG,cAAAA,GAJW;;AAKf,kBAAIA,GAAJ,EAAS;AACDC,gBAAAA,UADC,GACY;AACjBC,kBAAAA,EAAE,EAAGF,GAAG,CAACE,EADQ;AAEjBC,kBAAAA,MAAM,EAAEH,GAAG,CAACG,MAFK;AAGjBC,kBAAAA,IAAI,EAAEJ,GAAG,CAACI,IAHO;AAIjBC,kBAAAA,UAAU,EAAE;AAJK,iBADZ;AAOPZ,gBAAAA,YAAY,CAAC;AACXW,kBAAAA,IAAI,EAAE,gBADK;AAEXE,kBAAAA,OAAO,EAAEL;AAFE,iBAAD,CAAZ;AAIAT,gBAAAA,UAAU,CAACe,QAAX,CAAoB,SAApB;AACD,eAZD,MAYO;AACLf,gBAAAA,UAAU,CAACe,QAAX,CAAoB,QAApB;AACD;;AAnBc;AAAA;;AAAA;AAqBff,cAAAA,UAAU,CAACe,QAAX,CAAoB,QAApB;;AArBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnB;;AAwBAZ,IAAAA,UAAU;AACX,GA1BQ,EA0BN,EA1BM,CAAT;AA4BA,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,MAAlB;AAAyB,IAAA,MAAM,EAAC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,WAAD;AAAa,IAAA,IAAI,EAAC,OAAlB;AAA0B,IAAA,KAAK,EAAC,SAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,CADF;AAOD,CAxCD","sourcesContent":["import React, { useEffect, useContext } from \"react\";\r\nimport { Text } from \"react-native\";\r\nimport { Container, LoadingIcon } from \"./styles\";\r\nimport AsyncStorage from \"@react-native-community/async-storage\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { TOKEN_KEY } from \"../../util/Commons\"\r\nimport BarberLogo from \"../../assets/barber_2.svg\";\r\nimport Api from \"../../Api\";\r\nimport { UserContext } from '../../contexts/UserContext'\r\n\r\nexport default () => {\r\n  const navigation = useNavigation();\r\n\r\n  const { dispatch: userDispatch } = useContext(UserContext);\r\n\r\n  useEffect(() => {\r\n    const checkToken = async () => {\r\n      const token = await AsyncStorage.getItem(TOKEN_KEY);\r\n      if (token) {\r\n        console.log(token)\r\n        let res = await Api.checkToken(token);\r\n        if (res) {\r\n          const objPayload = {\r\n            id : res.id,\r\n            avatar: res.avatar,\r\n            type: res.type,\r\n            idCategory: 1\r\n          }\r\n          userDispatch({\r\n            type: \"setUserContext\",\r\n            payload: objPayload,\r\n          });\r\n          navigation.navigate(\"MainTab\");\r\n        } else {\r\n          navigation.navigate(\"SignIn\");\r\n        }\r\n      } else {\r\n        navigation.navigate(\"SignUp\");\r\n      }\r\n    };\r\n    checkToken();\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <BarberLogo width=\"100%\" height=\"23%\" />\r\n      <LoadingIcon size=\"large\" color=\"#FFFFFF\" />\r\n      <Text>Loading...</Text>\r\n    </Container>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}