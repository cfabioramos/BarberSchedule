{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _this = this,\n    _templateObject,\n    _templateObject2,\n    _jsxFileName = \"C:\\\\desenvolvimento\\\\BarberSchedule\\\\App\\\\src\\\\components\\\\ImagePickerComponent.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport styled from \"styled-components/native\";\nimport { DEFAULT_COLLOR_PALLET } from \"../screens/ColorsPalette\";\nexport default (function (_ref) {\n  var fieldPlaceholder = _ref.fieldPlaceholder,\n      imageField = _ref.imageField,\n      setimageField = _ref.setimageField;\n  useEffect(function () {\n    (function _callee() {\n      var _await$ImagePicker$re, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS !== \"web\")) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(ImagePicker.requestCameraRollPermissionsAsync());\n\n            case 3:\n              _await$ImagePicker$re = _context.sent;\n              status = _await$ImagePicker$re.status;\n\n              if (status !== \"granted\") {\n                alert(\"Sorry, we need camera roll permissions to make this work!\");\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.Images,\n              allowsEditing: true,\n              allowsMultipleSelection: false,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context2.sent;\n\n            if (!result.cancelled) {\n              setimageField(result.uri);\n            }\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var ImageItem = styled.TouchableOpacity(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n    width: 80px;\\n    height: 80px;\\n    border: 1px solid \", \";\\n    border-radius: 20px;\\n    justify-content: center;\\n    align-items: center;\\n  \"])), DEFAULT_COLLOR_PALLET[1]);\n  var PickImageText = styled.Text(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n    color: #000000;\\n    font-size: 15px;\\n  \"])));\n  return React.createElement(ImageItem, {\n    onPress: pickImage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, imageField ? React.createElement(Image, {\n    source: {\n      uri: imageField\n    },\n    style: {\n      width: 80,\n      height: 80,\n      borderRadius: 20\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }) : React.createElement(PickImageText, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, fieldPlaceholder));\n});","map":{"version":3,"sources":["C:/desenvolvimento/BarberSchedule/App/src/components/ImagePickerComponent.js"],"names":["React","useState","useEffect","ImagePicker","styled","DEFAULT_COLLOR_PALLET","fieldPlaceholder","imageField","setimageField","Platform","OS","requestCameraRollPermissionsAsync","status","alert","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","allowsEditing","allowsMultipleSelection","aspect","quality","result","cancelled","uri","ImageItem","TouchableOpacity","PickImageText","Text","width","height","borderRadius"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,qBAAT;AAEA,gBAAe,gBAAmD;AAAA,MAAjDC,gBAAiD,QAAjDA,gBAAiD;AAAA,MAA/BC,UAA+B,QAA/BA,UAA+B;AAAA,MAAnBC,aAAmB,QAAnBA,aAAmB;AAChEN,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBACKO,QAAQ,CAACC,EAAT,KAAgB,KADrB;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAIaP,WAAW,CAACQ,iCAAZ,EAJb;;AAAA;AAAA;AAGKC,cAAAA,MAHL,yBAGKA,MAHL;;AAKG,kBAAIA,MAAM,KAAK,SAAf,EAA0B;AACxBC,gBAAAA,KAAK,CAAC,2DAAD,CAAL;AACD;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAUD,GAXQ,EAWN,EAXM,CAAT;;AAaA,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACGX,WAAW,CAACY,uBAAZ,CAAoC;AACrDC,cAAAA,UAAU,EAAEb,WAAW,CAACc,gBAAZ,CAA6BC,MADY;AAErDC,cAAAA,aAAa,EAAE,IAFsC;AAGrDC,cAAAA,uBAAuB,EAAE,KAH4B;AAIrDC,cAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CAJ6C;AAKrDC,cAAAA,OAAO,EAAE;AAL4C,aAApC,CADH;;AAAA;AACZC,YAAAA,MADY;;AAShB,gBAAI,CAACA,MAAM,CAACC,SAAZ,EAAuB;AACrBhB,cAAAA,aAAa,CAACe,MAAM,CAACE,GAAR,CAAb;AACD;;AAXe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAcA,MAAMC,SAAS,GAAGtB,MAAM,CAACuB,gBAAV,mOAGOtB,qBAAqB,CAAC,CAAD,CAH5B,CAAf;AASA,MAAMuB,aAAa,GAAGxB,MAAM,CAACyB,IAAV,2HAAnB;AAKA,SACE,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAEf,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,UAAU,GACT,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAE;AAAEkB,MAAAA,GAAG,EAAElB;AAAP,KAAf;AAAoC,IAAA,KAAK,EAAE;AAAEuB,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,MAAM,EAAE,EAArB;AAAyBC,MAAAA,YAAY,EAAE;AAAvC,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADS,GAGT,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgB1B,gBAAhB,CAJJ,CADF;AASD,CAnDD","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Image, Platform } from \"react-native\";\r\nimport * as ImagePicker from \"expo-image-picker\";\r\nimport styled from \"styled-components/native\";\r\nimport { DEFAULT_COLLOR_PALLET } from \"../screens/ColorsPalette\";\r\n\r\nexport default ({fieldPlaceholder, imageField, setimageField}) => {\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (Platform.OS !== \"web\") {\r\n        const {\r\n          status,\r\n        } = await ImagePicker.requestCameraRollPermissionsAsync();\r\n        if (status !== \"granted\") {\r\n          alert(\"Sorry, we need camera roll permissions to make this work!\");\r\n        }\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  const pickImage = async () => {\r\n    let result = await ImagePicker.launchImageLibraryAsync({\r\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n      allowsEditing: true,\r\n      allowsMultipleSelection: false,\r\n      aspect: [4, 3],\r\n      quality: 1,\r\n    });\r\n\r\n    if (!result.cancelled) {\r\n      setimageField(result.uri);\r\n    }\r\n  };\r\n\r\n  const ImageItem = styled.TouchableOpacity`\r\n    width: 80px;\r\n    height: 80px;\r\n    border: 1px solid ${DEFAULT_COLLOR_PALLET[1]};\r\n    border-radius: 20px;\r\n    justify-content: center;\r\n    align-items: center;\r\n  `;\r\n\r\n  const PickImageText = styled.Text`\r\n    color: #000000;\r\n    font-size: 15px;\r\n  `;\r\n\r\n  return (\r\n    <ImageItem onPress={pickImage}>\r\n      {imageField ? (\r\n        <Image source={{ uri: imageField }} style={{ width: 80, height: 80, borderRadius: 20 }} />\r\n      ) : (\r\n        <PickImageText>{fieldPlaceholder}</PickImageText>\r\n      )}\r\n    </ImageItem>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}