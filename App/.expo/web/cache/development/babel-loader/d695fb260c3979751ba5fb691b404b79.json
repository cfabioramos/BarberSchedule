{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\desenvolvimento\\\\BarberSchedule\\\\App\\\\src\\\\screens\\\\Profile\\\\index.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { TOKEN_KEY } from \"../../util/Commons\";\nimport PersonIcon from \"../../assets/person.svg\";\nimport LockIcon from \"../../assets/lock.svg\";\nimport Api from \"../../Api\";\nimport InputComponent from \"../../components/InputComponent\";\nimport ImagePickerComponent from \"../../components/ImagePickerComponent\";\nimport { Container, InputArea, CustomButton, CustomButtonText, ImageArea } from \"./styles\";\nexport default (function () {\n  var navigation = useNavigation();\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      nameField = _useState2[0],\n      setNameField = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      actualPasswordField = _useState4[0],\n      setActualPasswordField = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      newPasswordField = _useState6[0],\n      setNewPasswordField = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      imageField = _useState8[0],\n      setImageField = _useState8[1];\n\n  var handleUpdateClick = function handleUpdateClick() {\n    if (nameField && imageField) {\n      if (!actualPasswordField && newPasswordField) {\n        alert(\"Para alterar a senha é necessário informar a senha atual\");\n      } else {\n        updateData();\n      }\n    } else if (!nameField) {\n      alert(\"O nome deve ser informado\");\n    } else {\n      alert(\"Adicione ao menos uma imagem de capa\");\n    }\n  };\n\n  var handleLogoutClick = function handleLogoutClick() {\n    return _regeneratorRuntime.async(function handleLogoutClick$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.removeItem(TOKEN_KEY));\n\n          case 2:\n            navigation.reset({\n              routes: [{\n                name: \"SignIn\"\n              }]\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var updateData = function updateData() {\n    var data = {};\n    data.name = nameField;\n    data.actualPassword = actualPasswordField;\n    data.newPassword = newPasswordField;\n    data.image = Platform.OS === \"android\" ? imageField : imageField.replace(\"file://\", \"\");\n    console.log(data);\n  };\n\n  return React.createElement(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, React.createElement(InputArea, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, React.createElement(ImageArea, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, React.createElement(ImagePickerComponent, {\n    fieldPlaceholder: \"Imagem\",\n    imageField: imageField,\n    setimageField: setImageField,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  })), React.createElement(InputComponent, {\n    IconSvg: PersonIcon,\n    placeholder: \"Nome\",\n    value: nameField,\n    onChangeText: function onChangeText(t) {\n      return setNameField(t);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }), React.createElement(InputComponent, {\n    IconSvg: LockIcon,\n    placeholder: \"Senha Atual\",\n    value: actualPasswordField,\n    onChangeText: function onChangeText(t) {\n      return setActualPasswordField(t);\n    },\n    password: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }), React.createElement(InputComponent, {\n    IconSvg: LockIcon,\n    placeholder: \"Nova Senha\",\n    value: newPasswordField,\n    onChangeText: function onChangeText(t) {\n      return setNewPasswordField(t);\n    },\n    password: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }), React.createElement(CustomButton, {\n    onPress: handleUpdateClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, React.createElement(CustomButtonText, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, \"ATUALIZAR\")), React.createElement(CustomButton, {\n    onPress: handleLogoutClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, React.createElement(CustomButtonText, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, \"SAIR\"))));\n});","map":{"version":3,"sources":["C:/desenvolvimento/BarberSchedule/App/src/screens/Profile/index.js"],"names":["React","useState","useNavigation","AsyncStorage","TOKEN_KEY","PersonIcon","LockIcon","Api","InputComponent","ImagePickerComponent","Container","InputArea","CustomButton","CustomButtonText","ImageArea","navigation","nameField","setNameField","actualPasswordField","setActualPasswordField","newPasswordField","setNewPasswordField","imageField","setImageField","handleUpdateClick","alert","updateData","handleLogoutClick","removeItem","reset","routes","name","data","actualPassword","newPassword","image","Platform","OS","replace","console","log","t"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport AsyncStorage from \"@react-native-community/async-storage\";\r\nimport { TOKEN_KEY } from \"../../util/Commons\";\r\nimport PersonIcon from \"../../assets/person.svg\";\r\nimport LockIcon from \"../../assets/lock.svg\";\r\nimport Api from \"../../Api\";\r\nimport InputComponent from \"../../components/InputComponent\";\r\nimport ImagePickerComponent from \"../../components/ImagePickerComponent\";\r\n\r\nimport {\r\n  Container,\r\n  InputArea,\r\n  CustomButton,\r\n  CustomButtonText,\r\n  ImageArea,\r\n} from \"./styles\";\r\n\r\nexport default () => {\r\n  const navigation = useNavigation();\r\n\r\n  const [nameField, setNameField] = useState(\"\");\r\n  const [actualPasswordField, setActualPasswordField] = useState(\"\");\r\n  const [newPasswordField, setNewPasswordField] = useState(\"\");\r\n  const [imageField, setImageField] = useState(null);\r\n\r\n  const handleUpdateClick = () => {\r\n    if (nameField && imageField) {\r\n      if (!actualPasswordField && newPasswordField) {\r\n        alert(\"Para alterar a senha é necessário informar a senha atual\");\r\n      } else {\r\n        updateData();\r\n      }\r\n    } else if (!nameField) {\r\n      alert(\"O nome deve ser informado\");\r\n    } else {\r\n      alert(\"Adicione ao menos uma imagem de capa\");\r\n    }\r\n  };\r\n\r\n  const handleLogoutClick = async () => {\r\n    // invalidar o token no servidor\r\n    await AsyncStorage.removeItem(TOKEN_KEY);\r\n    navigation.reset({\r\n      routes: [{ name: \"SignIn\" }],\r\n    });\r\n  };\r\n\r\n  const updateData = () => {\r\n    const data = {};\r\n    data.name = nameField;\r\n    data.actualPassword = actualPasswordField;\r\n    data.newPassword = newPasswordField;\r\n    data.image =\r\n      Platform.OS === \"android\"\r\n        ? imageField\r\n        : imageField.replace(\"file://\", \"\");\r\n\r\n    console.log(data);\r\n    //TODO\r\n    // Api.updateEstablishmentData()\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <InputArea>\r\n        <ImageArea>\r\n          <ImagePickerComponent\r\n            fieldPlaceholder=\"Imagem\"\r\n            imageField={imageField}\r\n            setimageField={setImageField}\r\n          />\r\n        </ImageArea>\r\n\r\n        <InputComponent\r\n          IconSvg={PersonIcon}\r\n          placeholder=\"Nome\"\r\n          value={nameField}\r\n          onChangeText={(t) => setNameField(t)}\r\n        />\r\n\r\n        <InputComponent\r\n          IconSvg={LockIcon}\r\n          placeholder=\"Senha Atual\"\r\n          value={actualPasswordField}\r\n          onChangeText={(t) => setActualPasswordField(t)}\r\n          password={true}\r\n        />\r\n\r\n        <InputComponent\r\n          IconSvg={LockIcon}\r\n          placeholder=\"Nova Senha\"\r\n          value={newPasswordField}\r\n          onChangeText={(t) => setNewPasswordField(t)}\r\n          password={true}\r\n        />\r\n\r\n        <CustomButton onPress={handleUpdateClick}>\r\n          <CustomButtonText>ATUALIZAR</CustomButtonText>\r\n        </CustomButton>\r\n        <CustomButton onPress={handleLogoutClick}>\r\n          <CustomButtonText>SAIR</CustomButtonText>\r\n        </CustomButton>\r\n      </InputArea>\r\n    </Container>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}