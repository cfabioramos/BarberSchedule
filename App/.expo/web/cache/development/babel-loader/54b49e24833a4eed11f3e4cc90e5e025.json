{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { Appointments, Users } from \"./Json\";\nimport AppTypedError from \"./util/AppTypedError\";\nimport { TOKEN_KEY } from \"./util/Commons\";\nvar BASE_API = \"http://ec2-18-191-181-158.us-east-2.compute.amazonaws.com:8080/\";\n\nvar getRequestBody = function getRequestBody(method, object) {\n  return {\n    method: method,\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(object)\n  };\n};\n\nexport default {\n  findUser: function findUser(userName, password) {\n    var users, user;\n    return _regeneratorRuntime.async(function findUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            users = Users.data;\n            user = users.filter(function (e) {\n              return e.userName == userName && e.password == password;\n            });\n\n            if (!user.length) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", user[0]);\n\n          case 4:\n            return _context.abrupt(\"return\", null);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  checkToken: function checkToken(token) {\n    var response, json;\n    return _regeneratorRuntime.async(function checkToken$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch(BASE_API + \"auth/refresh\", {\n              method: \"POST\",\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n              },\n              body: token\n            }));\n\n          case 2:\n            response = _context2.sent;\n\n            if (!(response && response.ok)) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            json = _context2.sent;\n            return _context2.abrupt(\"return\", json);\n\n          case 10:\n            console.log(\"HTTP-Error: \" + response.status);\n            return _context2.abrupt(\"return\", null);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  signIn: function signIn(email, password) {\n    var url, body, response, json;\n    return _regeneratorRuntime.async(function signIn$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            url = BASE_API + \"auth/login\";\n            body = getRequestBody(\"POST\", {\n              email: email,\n              password: password\n            });\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(fetch(url, body));\n\n          case 4:\n            response = _context3.sent;\n\n            if (!(response && response.ok)) {\n              _context3.next = 12;\n              break;\n            }\n\n            _context3.next = 8;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 8:\n            json = _context3.sent;\n            return _context3.abrupt(\"return\", json);\n\n          case 12:\n            console.log(\"HTTP-Error: \" + response.status);\n            _context3.t0 = alert;\n            _context3.next = 16;\n            return _regeneratorRuntime.awrap(response.text());\n\n          case 16:\n            _context3.t1 = _context3.sent;\n            (0, _context3.t0)(_context3.t1);\n            return _context3.abrupt(\"return\", null);\n\n          case 19:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  logout: function logout() {\n    var token;\n    return _regeneratorRuntime.async(function logout$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(TOKEN_KEY));\n\n          case 2:\n            token = _context4.sent;\n            return _context4.abrupt(\"return\", null);\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  findGeoLocation: function findGeoLocation(lat, lng) {\n    var uri, req, json;\n    return _regeneratorRuntime.async(function findGeoLocation$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            uri = \"https://nominatim.openstreetmap.org/reverse?format=json&lat=\" + lat + \"&lon=\" + lng;\n            _context5.next = 3;\n            return _regeneratorRuntime.awrap(fetch(uri));\n\n          case 3:\n            req = _context5.sent;\n            _context5.next = 6;\n            return _regeneratorRuntime.awrap(req.json());\n\n          case 6:\n            json = _context5.sent;\n            return _context5.abrupt(\"return\", json);\n\n          case 8:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  findAddressByCep: function findAddressByCep(cep) {\n    var uri, req, json;\n    return _regeneratorRuntime.async(function findAddressByCep$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            uri = \"https://viacep.com.br/ws/\" + cep + \"/json\";\n            _context6.next = 3;\n            return _regeneratorRuntime.awrap(fetch(uri));\n\n          case 3:\n            req = _context6.sent;\n            _context6.next = 6;\n            return _regeneratorRuntime.awrap(req.json());\n\n          case 6:\n            json = _context6.sent;\n            return _context6.abrupt(\"return\", json);\n\n          case 8:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getBarbers: function getBarbers(address) {\n    var token, uri, response, json;\n    return _regeneratorRuntime.async(function getBarbers$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(TOKEN_KEY));\n\n          case 2:\n            token = _context7.sent;\n            uri = BASE_API + \"users?cep=\" + address.cep + \"&latitude=\" + address.latitude + \"&longitude=\" + address.longitude + \"&street=\" + address.street + \"&city=\" + address.city;\n            _context7.next = 6;\n            return _regeneratorRuntime.awrap(fetch(uri, {\n              method: \"GET\",\n              headers: {\n                \"barber-token\": \"\" + token\n              }\n            }));\n\n          case 6:\n            response = _context7.sent;\n\n            if (!(response && response.ok)) {\n              _context7.next = 14;\n              break;\n            }\n\n            _context7.next = 10;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 10:\n            json = _context7.sent;\n            return _context7.abrupt(\"return\", json);\n\n          case 14:\n            _context7.t0 = AppTypedError;\n            _context7.next = 17;\n            return _regeneratorRuntime.awrap(response.text());\n\n          case 17:\n            _context7.t1 = _context7.sent;\n            throw new _context7.t0(_context7.t1);\n\n          case 19:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getFavoriteBarbers: function getFavoriteBarbers(idUser, address) {\n    var token, params, uri, response, json;\n    return _regeneratorRuntime.async(function getFavoriteBarbers$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(TOKEN_KEY));\n\n          case 2:\n            token = _context8.sent;\n            params = address && address.latitude ? \"?latitude=\" + address.latitude + \"&longitude=\" + address.longitude : \"\";\n            uri = BASE_API + \"users/\" + idUser + \"/favorites\" + params;\n            _context8.next = 7;\n            return _regeneratorRuntime.awrap(fetch(uri, {\n              method: \"GET\",\n              headers: {\n                \"barber-token\": \"\" + token\n              }\n            }));\n\n          case 7:\n            response = _context8.sent;\n\n            if (!(response && response.ok)) {\n              _context8.next = 15;\n              break;\n            }\n\n            _context8.next = 11;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 11:\n            json = _context8.sent;\n            return _context8.abrupt(\"return\", json);\n\n          case 15:\n            _context8.t0 = AppTypedError;\n            _context8.next = 18;\n            return _regeneratorRuntime.awrap(response.text());\n\n          case 18:\n            _context8.t1 = _context8.sent;\n            throw new _context8.t0(_context8.t1);\n\n          case 20:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getBarber: function getBarber(idEnterprise) {\n    var token, uri, req, json;\n    return _regeneratorRuntime.async(function getBarber$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(TOKEN_KEY));\n\n          case 2:\n            token = _context9.sent;\n            uri = BASE_API + \"users/enterprises/\" + idEnterprise;\n            _context9.next = 6;\n            return _regeneratorRuntime.awrap(fetch(uri, {\n              method: \"GET\",\n              headers: {\n                \"barber-token\": \"\" + token\n              }\n            }));\n\n          case 6:\n            req = _context9.sent;\n            _context9.next = 9;\n            return _regeneratorRuntime.awrap(req.json());\n\n          case 9:\n            json = _context9.sent;\n            return _context9.abrupt(\"return\", json);\n\n          case 11:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setFavoriteBarber: function setFavoriteBarber(idUser, idEnterprise) {\n    var token, req, json;\n    return _regeneratorRuntime.async(function setFavoriteBarber$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(TOKEN_KEY));\n\n          case 2:\n            token = _context10.sent;\n            _context10.next = 5;\n            return _regeneratorRuntime.awrap(fetch(BASE_API + \"/users/\" + idUser + \"/favorites/\" + idEnterprise, {\n              method: \"POST\",\n              headers: {\n                Accept: \"application/json\",\n                \"barber-token\": \"\" + token\n              }\n            }));\n\n          case 5:\n            req = _context10.sent;\n            _context10.next = 8;\n            return _regeneratorRuntime.awrap(req.json());\n\n          case 8:\n            json = _context10.sent;\n            return _context10.abrupt(\"return\", json);\n\n          case 10:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  deleteFavoriteBarber: function deleteFavoriteBarber(idUser, idEnterprise) {\n    var token, response;\n    return _regeneratorRuntime.async(function deleteFavoriteBarber$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            _context11.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(TOKEN_KEY));\n\n          case 2:\n            token = _context11.sent;\n            _context11.next = 5;\n            return _regeneratorRuntime.awrap(fetch(BASE_API + \"/users/\" + idUser + \"/favorites/\" + idEnterprise, {\n              method: \"DELETE\",\n              headers: {\n                Accept: \"application/json\",\n                \"barber-token\": \"\" + token\n              }\n            }));\n\n          case 5:\n            response = _context11.sent;\n\n            if (!(response && !response.ok)) {\n              _context11.next = 12;\n              break;\n            }\n\n            _context11.t0 = AppTypedError;\n            _context11.next = 10;\n            return _regeneratorRuntime.awrap(response.text());\n\n          case 10:\n            _context11.t1 = _context11.sent;\n            throw new _context11.t0(_context11.t1);\n\n          case 12:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  createAppointment: function createAppointment(barberId, service, selectedYear, selectedMonth, selectedDay, selectedHour) {\n    return _regeneratorRuntime.async(function createAppointment$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            return _context12.abrupt(\"return\", {\n              error: \"\"\n            });\n\n          case 1:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  findAppointments: function findAppointments() {\n    return _regeneratorRuntime.async(function findAppointments$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            return _context13.abrupt(\"return\", Appointments);\n\n          case 1:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  submitMultipartWithFormData: function submitMultipartWithFormData(entity, methodName, formData) {\n    var token, uri, varHeaders, response, json;\n    return _regeneratorRuntime.async(function submitMultipartWithFormData$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            _context14.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(TOKEN_KEY));\n\n          case 2:\n            token = _context14.sent;\n            uri = \"\" + BASE_API + entity;\n            varHeaders = {\n              \"content-type\": \"multipart/form-data\"\n            };\n\n            if (token) {\n              varHeaders[\"barber-token\"] = \"\" + token;\n            }\n\n            _context14.next = 8;\n            return _regeneratorRuntime.awrap(fetch(uri, {\n              method: methodName,\n              body: formData,\n              headers: varHeaders\n            }));\n\n          case 8:\n            response = _context14.sent;\n\n            if (!(response && response.ok)) {\n              _context14.next = 16;\n              break;\n            }\n\n            _context14.next = 12;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 12:\n            json = _context14.sent;\n            return _context14.abrupt(\"return\", json);\n\n          case 16:\n            _context14.t0 = AppTypedError;\n            _context14.next = 19;\n            return _regeneratorRuntime.awrap(response.text());\n\n          case 19:\n            _context14.t1 = _context14.sent;\n            throw new _context14.t0(_context14.t1);\n\n          case 21:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"sources":["C:/desenvolvimento/BarberSchedule/App/src/Api.js"],"names":["AsyncStorage","Appointments","Users","AppTypedError","TOKEN_KEY","BASE_API","getRequestBody","method","object","headers","Accept","body","JSON","stringify","findUser","userName","password","users","data","user","filter","e","length","checkToken","token","fetch","response","ok","json","console","log","status","signIn","email","url","alert","text","logout","getItem","findGeoLocation","lat","lng","uri","req","findAddressByCep","cep","getBarbers","address","latitude","longitude","street","city","getFavoriteBarbers","idUser","params","getBarber","idEnterprise","setFavoriteBarber","deleteFavoriteBarber","createAppointment","barberId","service","selectedYear","selectedMonth","selectedDay","selectedHour","error","findAppointments","submitMultipartWithFormData","entity","methodName","formData","varHeaders"],"mappings":"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","sourcesContent":["import AsyncStorage from \"@react-native-community/async-storage\";\r\nimport { Appointments, Users } from \"./Json\";\r\nimport AppTypedError from \"./util/AppTypedError\";\r\nimport { TOKEN_KEY } from \"./util/Commons\";\r\n\r\n\r\nconst BASE_API =\r\n  \"http://ec2-18-191-181-158.us-east-2.compute.amazonaws.com:8080/\";\r\n  \r\nconst getRequestBody = (method, object) => {\r\n  return {\r\n    method: method,\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(object),\r\n  };\r\n};\r\n\r\nexport default {\r\n  findUser: async (userName, password) => {\r\n    /* const token = await AsyncStorage.getItem(\"cfbarber_token\");\r\n    const req = await fetch(`${BASE_API}/appointments?token=${token}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      }\r\n    const json = await req.json()\r\n    return json */\r\n    const users = Users.data;\r\n\r\n    const user = users.filter(\r\n      (e) => e.userName == userName && e.password == password\r\n    );\r\n\r\n    if (user.length) return user[0];\r\n\r\n    return null;\r\n  },\r\n\r\n  checkToken: async (token) => {\r\n    const response = await fetch(`${BASE_API}auth/refresh`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: token,\r\n    });\r\n\r\n    if (response && response.ok) {\r\n      let json = await response.json();\r\n      return json;\r\n    } else {\r\n      console.log(\"HTTP-Error: \" + response.status);\r\n      //alert(await response.text());\r\n      return null;\r\n    }\r\n  },\r\n\r\n  signIn: async (email, password) => {\r\n    const url = `${BASE_API}auth/login`;\r\n    const body = getRequestBody(\"POST\", { email, password });\r\n    let response = await fetch(url, body);\r\n    if (response && response.ok) {\r\n      let json = await response.json();\r\n      return json;\r\n    } else {\r\n      console.log(\"HTTP-Error: \" + response.status);\r\n      alert(await response.text());\r\n      return null;\r\n    }\r\n  },\r\n\r\n  logout: async () => {\r\n    const token = await AsyncStorage.getItem(TOKEN_KEY);\r\n    /*const req = await fetch(`${BASE_API}auth/logout`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"barber-token\": `${token}`,\r\n      },\r\n    });\r\n    const json = await req.json();\r\n    return json;*/\r\n    return null;\r\n  },\r\n\r\n  findGeoLocation: async (lat, lng) => {\r\n    const uri = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`;\r\n    const req = await fetch(uri);\r\n    const json = await req.json();\r\n    return json;\r\n  },\r\n\r\n  findAddressByCep: async (cep) => {\r\n    const uri = `https://viacep.com.br/ws/${cep}/json`;\r\n    const req = await fetch(uri);\r\n    const json = await req.json();\r\n    return json;\r\n  },\r\n\r\n  getBarbers: async (address) => {\r\n    const token = await AsyncStorage.getItem(TOKEN_KEY);\r\n    const uri = `${BASE_API}users?cep=${address.cep}&latitude=${address.latitude}&longitude=${address.longitude}&street=${address.street}&city=${address.city}`;\r\n    const response = await fetch(uri, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"barber-token\": `${token}`,\r\n      },\r\n    });\r\n    if (response && response.ok) {\r\n      let json = await response.json();\r\n      return json;\r\n    } else {\r\n      throw new AppTypedError(await response.text());\r\n    }\r\n  },\r\n\r\n  getFavoriteBarbers: async (idUser,address) => {\r\n    const token = await AsyncStorage.getItem(TOKEN_KEY);\r\n    const params = address && address.latitude ? `?latitude=${address.latitude}&longitude=${address.longitude}` : \"\";\r\n    const uri = `${BASE_API}users/${idUser}/favorites${params}`;\r\n    const response = await fetch(uri, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"barber-token\": `${token}`,\r\n      },\r\n    });\r\n    if (response && response.ok) {\r\n      let json = await response.json();\r\n      return json;\r\n    } else {\r\n      throw new AppTypedError(await response.text());\r\n    }\r\n  },\r\n\r\n  getBarber: async (idEnterprise) => {\r\n    const token = await AsyncStorage.getItem(TOKEN_KEY);\r\n    const uri = `${BASE_API}users/enterprises/${idEnterprise}`;\r\n    const req = await fetch(uri, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"barber-token\": `${token}`,\r\n      },\r\n    });\r\n    const json = await req.json();\r\n    return json;\r\n  },\r\n\r\n  setFavoriteBarber: async (idUser, idEnterprise) => {\r\n    const token = await AsyncStorage.getItem(TOKEN_KEY);\r\n    const req = await fetch(\r\n      `${BASE_API}/users/${idUser}/favorites/${idEnterprise}`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"barber-token\": `${token}`,\r\n        },\r\n      }\r\n    );\r\n    const json = await req.json();\r\n    return json;\r\n  },\r\n\r\n  deleteFavoriteBarber: async (idUser, idEnterprise) => {\r\n    const token = await AsyncStorage.getItem(TOKEN_KEY);\r\n    const response = await fetch(\r\n      `${BASE_API}/users/${idUser}/favorites/${idEnterprise}`,\r\n      {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"barber-token\": `${token}`,\r\n        },\r\n      }\r\n    );\r\n    if (response && !response.ok) {\r\n      throw new AppTypedError(await response.text());\r\n    }\r\n  },\r\n\r\n  createAppointment: async (\r\n    barberId,\r\n    service,\r\n    selectedYear,\r\n    selectedMonth,\r\n    selectedDay,\r\n    selectedHour\r\n  ) => {\r\n    /*const token = await AsyncStorage.getItem(TOKEN_KEY);\r\n    const req = await fetch(`${BASE_API}/barbers/${barberId}/appointments`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      }\r\n      body: JSON.stringify(\r\n        {\r\n          token, service, \r\n          year: selectedYear, \r\n          month: selectedMonth, \r\n          day: selectedDay, \r\n          hour: selectedHour})\r\n        });\r\n    const json = await req.json()\r\n    return json*/\r\n    return { error: \"\" };\r\n  },\r\n\r\n  findAppointments: async () => {\r\n    /* const token = await AsyncStorage.getItem(TOKEN_KEY);\r\n    const req = await fetch(`${BASE_API}/appointments?token=${token}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      }\r\n    const json = await req.json()\r\n    return json */\r\n    return Appointments;\r\n  },\r\n\r\n  submitMultipartWithFormData: async (entity, methodName, formData) => {\r\n    const token = await AsyncStorage.getItem(TOKEN_KEY);\r\n    const uri = `${BASE_API}${entity}`;\r\n    let varHeaders = {\r\n      \"content-type\": \"multipart/form-data\",\r\n    };\r\n    if (token) {\r\n      varHeaders[\"barber-token\"] = `${token}`;\r\n    }\r\n\r\n    const response = await fetch(uri, {\r\n      method: methodName,\r\n      body: formData,\r\n      headers: varHeaders,\r\n    });\r\n    if (response && response.ok) {\r\n      let json = await response.json();\r\n      return json;\r\n    } else {\r\n      throw new AppTypedError(await response.text());\r\n    }\r\n  },\r\n\r\n\r\n \r\n};\r\n"]},"metadata":{},"sourceType":"module"}